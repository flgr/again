{"tagline":"The best way to iteratively develop with Ruby","name":"Again","google":"","body":"# again.rb: Your code reacting to every change #\r\n\r\n## DESCRIPTION ##\r\n\r\nagain is the best way to iteratively develop with Ruby.\r\n\r\nIt monitors your application's code or any required library\r\nfor changes. In the likely event of a change, the code is\r\nautomatically loaded again.\r\n\r\n## Why? ##\r\n\r\nAfter seeing a [live stream](http://www.youtube.com/watch?v=zdLDYUNRErQ&feature=player_detailpage#t=532s)\r\nof Markus Persson [hyper-incrementally developing a game for a 48h game development competition in Java](\r\nhttp://news.ycombinator.com/item?id=2911696), where he debugged\r\nhis 3d rendering code by just changing expressions, hitting save\r\nand instantly seeing the effect, I wanted to have support for\r\nhyper-iterative development in Ruby. \r\n\r\nChange a color, save, switch to your application and it's changed.\r\n\r\nagain has been tested with Ruby 1.8, Ruby 1.9 and JRuby 1.6.2.\r\nI use it for my personal development, including [Sinatra](\r\nhttp://www.sinatrarb.com/) web development as well as\r\n[Ruby/Gosu](http://www.libgosu.org/) game development.\r\n\r\n(If anybody has a better link for the video of Markus Persson working incrementally,\r\n[please drop me a mail](mailto:florian.s.gross@web.de)!)\r\n\r\n\r\n## INSTALL ##\r\n\r\n```sh\r\n  gem install again\r\n```\r\n\r\n## SYNOPSIS ##\r\n\r\n### Getting started with again ###\r\n\r\nAll you need to do to setup automatic reloading of your\r\ncode is to require again:\r\n\r\n```ruby\r\n  require 'again'       # ...and again and again\r\n```\r\n\r\nYou should do this after all other libraries of your application\r\nhave already been loaded: Make it your last `require`.\r\n\r\n\r\n### Controlling what to execute again ###\r\n\r\n#### Not running start-up logic again ####\r\n\r\nWhen again detects a change to a file, it will reexecute all code\r\nin that file. This also applies to the main file of your application,\r\nthe one you actually run from the command line.\r\n\r\nFor method and class definitions, this is no problem and things will\r\nwork exactly as you expect.\r\n\r\nYou should however wrap the actual start-up logic of your application\r\nlike this:\r\n\r\n```ruby\r\n  # Current file being executed from command line?\r\n  if __FILE__ == $PROGRAM_NAME then\r\n    # Show them windows\r\n    window = GameWindow.new\r\n    window.show\r\n  end\r\n```\r\n\r\nThis is something that is good style anyway (in order to allow your\r\ncode to be used as a library): The above would only be executed on\r\ndirect execution from the command line; and not when the file is\r\nloaded as a library. [More detailed explanation of `__FILE__ == $PROGRAM_NAME`](http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/184607)\r\n\r\nagain actually invests some extra effort to make sure that\r\n`__FILE__ == $PROGRAM_NAME` blocks will not be run again\r\nafter reloading your main application file.\r\n\r\n\r\n#### Running additional code on reloads ####\r\n\r\nYou can also have logic that is only run on reloads:\r\n\r\n```ruby\r\n  if Again.reloaded? then\r\n    puts \"Hello again\"\r\n  end\r\n```\r\n\r\nThis is useful when you want to reset your application into a\r\npredictable state or when your frameworks need some special logic\r\nto make sure that your changes will be picked up. (Such as clearing\r\nroutes in Sinatra, [see below](#sinatra-again).)\r\n\r\n\r\n### gosu again ###\r\n\r\nI'm using again for game development with Ruby, together with\r\n[Ruby/Gosu](http://www.libgosu.org/). My code typically looks like this:\r\n\r\n```ruby\r\n  require 'rubygems'\r\n  require 'gosu'\r\n  # ...\r\n  require 'again'\r\n  \r\n  include Gosu\r\n  \r\n  class GameWindow < Gosu::Window\r\n    def initialize()\r\n      @objects = ...\r\n    end\r\n    \r\n    def update()\r\n      @objects.each(&:update)\r\n    rescue Exception => err\r\n      handle_error(err)\r\n    end\r\n\r\n    def draw()\r\n      @objects.each(&:draw)\r\n    rescue Exception => err\r\n      handle_error(err)\r\n    end\r\n    \r\n    def handle_error(err)\r\n      # Simple logic, but it does the trick\r\n      STDERR.puts err, err.backtrace\r\n      sleep 3\r\n    end\r\n  end\r\n  \r\n  # Current file being executed from command line?\r\n  if __FILE__ == $PROGRAM_NAME then\r\n    # Let's play\r\n    window = GameWindow.new\r\n    window.show\r\n  end\r\n```\r\n\r\nRescuing exceptions in `update()` and `draw()` and\r\nhandling them in a central place is a very good idea.\r\nIf you have uncaught exceptions in there, Gosu will\r\nshutdown your application. This would kill our nice\r\nincremental development loop in the case of an error.\r\n\r\n\r\n### sinatra again ###\r\n\r\nI also use again to incrementalize my [Sinatra](http://www.libgosu.org/) development.\r\nThis is very similar to the above Gosu example, but with\r\none special twist:\r\n\r\n```ruby\r\n  require 'rubygems'\r\n  require 'sinatra'\r\n  require 'json'\r\n  # ...\r\n  require 'again'\r\n  \r\n  if Again.reloaded? then\r\n    # Here's the twist\r\n    Sinatra::Application.routes.clear\r\n  end\r\n  \r\n  get '/' do\r\n    return \"Awesome!\"\r\n  end\r\n```\r\n\r\nWe need to clear the Application routes first. Otherwise\r\nsinatra won't let us redefine our routes. That's all!\r\n\r\n\r\n## LICENSE ##\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2012, Florian Gross <florian.s.gross@web.de>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\nof the Software, and to permit persons to whom the Software is furnished to do\r\nso, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.","note":"Don't delete this file! It's used internally to help with page regeneration."}